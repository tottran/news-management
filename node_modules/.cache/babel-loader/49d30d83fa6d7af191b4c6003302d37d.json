{"ast":null,"code":"/*! JSON v3.3.2 | https://bestiejs.github.io/json3 | Copyright 2012-2015, Kit Cambridge, Benjamin Tan | http://kit.mit-license.org */\n;\n(function () {\n  // Detect the `define` function exposed by asynchronous module loaders. The\n  // strict `define` check is necessary for compatibility with `r.js`.\n  var isLoader = typeof define === \"function\" && define.amd;\n\n  // A set of types used to distinguish objects from primitives.\n  var objectTypes = {\n    \"function\": true,\n    \"object\": true\n  };\n\n  // Detect the `exports` object exposed by CommonJS implementations.\n  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;\n\n  // Use the `global` object exposed by Node (including Browserify via\n  // `insert-module-globals`), Narwhal, and Ringo as the default context,\n  // and the `window` object in browsers. Rhino exports a `global` function\n  // instead.\n  var root = objectTypes[typeof window] && window || this,\n    freeGlobal = freeExports && objectTypes[typeof module] && module && !module.nodeType && typeof global == \"object\" && global;\n  if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal)) {\n    root = freeGlobal;\n  }\n\n  // Public: Initializes JSON 3 using the given `context` object, attaching the\n  // `stringify` and `parse` functions to the specified `exports` object.\n  function runInContext(context, exports) {\n    context || (context = root.Object());\n    exports || (exports = root.Object());\n\n    // Native constructor aliases.\n    var Number = context.Number || root.Number,\n      String = context.String || root.String,\n      Object = context.Object || root.Object,\n      Date = context.Date || root.Date,\n      SyntaxError = context.SyntaxError || root.SyntaxError,\n      TypeError = context.TypeError || root.TypeError,\n      Math = context.Math || root.Math,\n      nativeJSON = context.JSON || root.JSON;\n\n    // Delegate to the native `stringify` and `parse` implementations.\n    if (typeof nativeJSON == \"object\" && nativeJSON) {\n      exports.stringify = nativeJSON.stringify;\n      exports.parse = nativeJSON.parse;\n    }\n\n    // Convenience aliases.\n    var objectProto = Object.prototype,\n      getClass = objectProto.toString,\n      isProperty = objectProto.hasOwnProperty,\n      undefined;\n\n    // Internal: Contains `try...catch` logic used by other functions.\n    // This prevents other functions from being deoptimized.\n    function attempt(func, errorFunc) {\n      try {\n        func();\n      } catch (exception) {\n        if (errorFunc) {\n          errorFunc();\n        }\n      }\n    }\n\n    // Test the `Date#getUTC*` methods. Based on work by @Yaffle.\n    var isExtended = new Date(-3509827334573292);\n    attempt(function () {\n      // The `getUTCFullYear`, `Month`, and `Date` methods return nonsensical\n      // results for certain dates in Opera >= 10.53.\n      isExtended = isExtended.getUTCFullYear() == -109252 && isExtended.getUTCMonth() === 0 && isExtended.getUTCDate() === 1 && isExtended.getUTCHours() == 10 && isExtended.getUTCMinutes() == 37 && isExtended.getUTCSeconds() == 6 && isExtended.getUTCMilliseconds() == 708;\n    });\n\n    // Internal: Determines whether the native `JSON.stringify` and `parse`\n    // implementations are spec-compliant. Based on work by Ken Snyder.\n    function has(name) {\n      if (has[name] != null) {\n        // Return cached feature test result.\n        return has[name];\n      }\n      var isSupported;\n      if (name == \"bug-string-char-index\") {\n        // IE <= 7 doesn't support accessing string characters using square\n        // bracket notation. IE 8 only supports this for primitives.\n        isSupported = \"a\"[0] != \"a\";\n      } else if (name == \"json\") {\n        // Indicates whether both `JSON.stringify` and `JSON.parse` are\n        // supported.\n        isSupported = has(\"json-stringify\") && has(\"date-serialization\") && has(\"json-parse\");\n      } else if (name == \"date-serialization\") {\n        // Indicates whether `Date`s can be serialized accurately by `JSON.stringify`.\n        isSupported = has(\"json-stringify\") && isExtended;\n        if (isSupported) {\n          var stringify = exports.stringify;\n          attempt(function () {\n            isSupported =\n            // JSON 2, Prototype <= 1.7, and older WebKit builds incorrectly\n            // serialize extended years.\n            stringify(new Date(-8.64e15)) == '\"-271821-04-20T00:00:00.000Z\"' &&\n            // The milliseconds are optional in ES 5, but required in 5.1.\n            stringify(new Date(8.64e15)) == '\"+275760-09-13T00:00:00.000Z\"' &&\n            // Firefox <= 11.0 incorrectly serializes years prior to 0 as negative\n            // four-digit years instead of six-digit years. Credits: @Yaffle.\n            stringify(new Date(-621987552e5)) == '\"-000001-01-01T00:00:00.000Z\"' &&\n            // Safari <= 5.1.5 and Opera >= 10.53 incorrectly serialize millisecond\n            // values less than 1000. Credits: @Yaffle.\n            stringify(new Date(-1)) == '\"1969-12-31T23:59:59.999Z\"';\n          });\n        }\n      } else {\n        var value,\n          serialized = '{\"a\":[1,true,false,null,\"\\\\u0000\\\\b\\\\n\\\\f\\\\r\\\\t\"]}';\n        // Test `JSON.stringify`.\n        if (name == \"json-stringify\") {\n          var stringify = exports.stringify,\n            stringifySupported = typeof stringify == \"function\";\n          if (stringifySupported) {\n            // A test function object with a custom `toJSON` method.\n            (value = function () {\n              return 1;\n            }).toJSON = value;\n            attempt(function () {\n              stringifySupported =\n              // Firefox 3.1b1 and b2 serialize string, number, and boolean\n              // primitives as object literals.\n              stringify(0) === \"0\" &&\n              // FF 3.1b1, b2, and JSON 2 serialize wrapped primitives as object\n              // literals.\n              stringify(new Number()) === \"0\" && stringify(new String()) == '\"\"' &&\n              // FF 3.1b1, 2 throw an error if the value is `null`, `undefined`, or\n              // does not define a canonical JSON representation (this applies to\n              // objects with `toJSON` properties as well, *unless* they are nested\n              // within an object or array).\n              stringify(getClass) === undefined &&\n              // IE 8 serializes `undefined` as `\"undefined\"`. Safari <= 5.1.7 and\n              // FF 3.1b3 pass this test.\n              stringify(undefined) === undefined &&\n              // Safari <= 5.1.7 and FF 3.1b3 throw `Error`s and `TypeError`s,\n              // respectively, if the value is omitted entirely.\n              stringify() === undefined &&\n              // FF 3.1b1, 2 throw an error if the given value is not a number,\n              // string, array, object, Boolean, or `null` literal. This applies to\n              // objects with custom `toJSON` methods as well, unless they are nested\n              // inside object or array literals. YUI 3.0.0b1 ignores custom `toJSON`\n              // methods entirely.\n              stringify(value) === \"1\" && stringify([value]) == \"[1]\" &&\n              // Prototype <= 1.6.1 serializes `[undefined]` as `\"[]\"` instead of\n              // `\"[null]\"`.\n              stringify([undefined]) == \"[null]\" &&\n              // YUI 3.0.0b1 fails to serialize `null` literals.\n              stringify(null) == \"null\" &&\n              // FF 3.1b1, 2 halts serialization if an array contains a function:\n              // `[1, true, getClass, 1]` serializes as \"[1,true,],\". FF 3.1b3\n              // elides non-JSON values from objects and arrays, unless they\n              // define custom `toJSON` methods.\n              stringify([undefined, getClass, null]) == \"[null,null,null]\" &&\n              // Simple serialization test. FF 3.1b1 uses Unicode escape sequences\n              // where character escape codes are expected (e.g., `\\b` => `\\u0008`).\n              stringify({\n                \"a\": [value, true, false, null, \"\\x00\\b\\n\\f\\r\\t\"]\n              }) == serialized &&\n              // FF 3.1b1 and b2 ignore the `filter` and `width` arguments.\n              stringify(null, value) === \"1\" && stringify([1, 2], null, 1) == \"[\\n 1,\\n 2\\n]\";\n            }, function () {\n              stringifySupported = false;\n            });\n          }\n          isSupported = stringifySupported;\n        }\n        // Test `JSON.parse`.\n        if (name == \"json-parse\") {\n          var parse = exports.parse,\n            parseSupported;\n          if (typeof parse == \"function\") {\n            attempt(function () {\n              // FF 3.1b1, b2 will throw an exception if a bare literal is provided.\n              // Conforming implementations should also coerce the initial argument to\n              // a string prior to parsing.\n              if (parse(\"0\") === 0 && !parse(false)) {\n                // Simple parsing test.\n                value = parse(serialized);\n                parseSupported = value[\"a\"].length == 5 && value[\"a\"][0] === 1;\n                if (parseSupported) {\n                  attempt(function () {\n                    // Safari <= 5.1.2 and FF 3.1b1 allow unescaped tabs in strings.\n                    parseSupported = !parse('\"\\t\"');\n                  });\n                  if (parseSupported) {\n                    attempt(function () {\n                      // FF 4.0 and 4.0.1 allow leading `+` signs and leading\n                      // decimal points. FF 4.0, 4.0.1, and IE 9-10 also allow\n                      // certain octal literals.\n                      parseSupported = parse(\"01\") !== 1;\n                    });\n                  }\n                  if (parseSupported) {\n                    attempt(function () {\n                      // FF 4.0, 4.0.1, and Rhino 1.7R3-R4 allow trailing decimal\n                      // points. These environments, along with FF 3.1b1 and 2,\n                      // also allow trailing commas in JSON objects and arrays.\n                      parseSupported = parse(\"1.\") !== 1;\n                    });\n                  }\n                }\n              }\n            }, function () {\n              parseSupported = false;\n            });\n          }\n          isSupported = parseSupported;\n        }\n      }\n      return has[name] = !!isSupported;\n    }\n    has[\"bug-string-char-index\"] = has[\"date-serialization\"] = has[\"json\"] = has[\"json-stringify\"] = has[\"json-parse\"] = null;\n    if (!has(\"json\")) {\n      // Common `[[Class]]` name aliases.\n      var functionClass = \"[object Function]\",\n        dateClass = \"[object Date]\",\n        numberClass = \"[object Number]\",\n        stringClass = \"[object String]\",\n        arrayClass = \"[object Array]\",\n        booleanClass = \"[object Boolean]\";\n\n      // Detect incomplete support for accessing string characters by index.\n      var charIndexBuggy = has(\"bug-string-char-index\");\n\n      // Internal: Normalizes the `for...in` iteration algorithm across\n      // environments. Each enumerated key is yielded to a `callback` function.\n      var forOwn = function (object, callback) {\n        var size = 0,\n          Properties,\n          dontEnums,\n          property;\n\n        // Tests for bugs in the current environment's `for...in` algorithm. The\n        // `valueOf` property inherits the non-enumerable flag from\n        // `Object.prototype` in older versions of IE, Netscape, and Mozilla.\n        (Properties = function () {\n          this.valueOf = 0;\n        }).prototype.valueOf = 0;\n\n        // Iterate over a new instance of the `Properties` class.\n        dontEnums = new Properties();\n        for (property in dontEnums) {\n          // Ignore all properties inherited from `Object.prototype`.\n          if (isProperty.call(dontEnums, property)) {\n            size++;\n          }\n        }\n        Properties = dontEnums = null;\n\n        // Normalize the iteration algorithm.\n        if (!size) {\n          // A list of non-enumerable properties inherited from `Object.prototype`.\n          dontEnums = [\"valueOf\", \"toString\", \"toLocaleString\", \"propertyIsEnumerable\", \"isPrototypeOf\", \"hasOwnProperty\", \"constructor\"];\n          // IE <= 8, Mozilla 1.0, and Netscape 6.2 ignore shadowed non-enumerable\n          // properties.\n          forOwn = function (object, callback) {\n            var isFunction = getClass.call(object) == functionClass,\n              property,\n              length;\n            var hasProperty = !isFunction && typeof object.constructor != \"function\" && objectTypes[typeof object.hasOwnProperty] && object.hasOwnProperty || isProperty;\n            for (property in object) {\n              // Gecko <= 1.0 enumerates the `prototype` property of functions under\n              // certain conditions; IE does not.\n              if (!(isFunction && property == \"prototype\") && hasProperty.call(object, property)) {\n                callback(property);\n              }\n            }\n            // Manually invoke the callback for each non-enumerable property.\n            for (length = dontEnums.length; property = dontEnums[--length];) {\n              if (hasProperty.call(object, property)) {\n                callback(property);\n              }\n            }\n          };\n        } else {\n          // No bugs detected; use the standard `for...in` algorithm.\n          forOwn = function (object, callback) {\n            var isFunction = getClass.call(object) == functionClass,\n              property,\n              isConstructor;\n            for (property in object) {\n              if (!(isFunction && property == \"prototype\") && isProperty.call(object, property) && !(isConstructor = property === \"constructor\")) {\n                callback(property);\n              }\n            }\n            // Manually invoke the callback for the `constructor` property due to\n            // cross-environment inconsistencies.\n            if (isConstructor || isProperty.call(object, property = \"constructor\")) {\n              callback(property);\n            }\n          };\n        }\n        return forOwn(object, callback);\n      };\n\n      // Public: Serializes a JavaScript `value` as a JSON string. The optional\n      // `filter` argument may specify either a function that alters how object and\n      // array members are serialized, or an array of strings and numbers that\n      // indicates which properties should be serialized. The optional `width`\n      // argument may be either a string or number that specifies the indentation\n      // level of the output.\n      if (!has(\"json-stringify\") && !has(\"date-serialization\")) {\n        // Internal: A map of control characters and their escaped equivalents.\n        var Escapes = {\n          92: \"\\\\\\\\\",\n          34: '\\\\\"',\n          8: \"\\\\b\",\n          12: \"\\\\f\",\n          10: \"\\\\n\",\n          13: \"\\\\r\",\n          9: \"\\\\t\"\n        };\n\n        // Internal: Converts `value` into a zero-padded string such that its\n        // length is at least equal to `width`. The `width` must be <= 6.\n        var leadingZeroes = \"000000\";\n        var toPaddedString = function (width, value) {\n          // The `|| 0` expression is necessary to work around a bug in\n          // Opera <= 7.54u2 where `0 == -0`, but `String(-0) !== \"0\"`.\n          return (leadingZeroes + (value || 0)).slice(-width);\n        };\n\n        // Internal: Serializes a date object.\n        var serializeDate = function (value) {\n          var getData, year, month, date, time, hours, minutes, seconds, milliseconds;\n          // Define additional utility methods if the `Date` methods are buggy.\n          if (!isExtended) {\n            var floor = Math.floor;\n            // A mapping between the months of the year and the number of days between\n            // January 1st and the first of the respective month.\n            var Months = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];\n            // Internal: Calculates the number of days between the Unix epoch and the\n            // first day of the given month.\n            var getDay = function (year, month) {\n              return Months[month] + 365 * (year - 1970) + floor((year - 1969 + (month = +(month > 1))) / 4) - floor((year - 1901 + month) / 100) + floor((year - 1601 + month) / 400);\n            };\n            getData = function (value) {\n              // Manually compute the year, month, date, hours, minutes,\n              // seconds, and milliseconds if the `getUTC*` methods are\n              // buggy. Adapted from @Yaffle's `date-shim` project.\n              date = floor(value / 864e5);\n              for (year = floor(date / 365.2425) + 1970 - 1; getDay(year + 1, 0) <= date; year++);\n              for (month = floor((date - getDay(year, 0)) / 30.42); getDay(year, month + 1) <= date; month++);\n              date = 1 + date - getDay(year, month);\n              // The `time` value specifies the time within the day (see ES\n              // 5.1 section 15.9.1.2). The formula `(A % B + B) % B` is used\n              // to compute `A modulo B`, as the `%` operator does not\n              // correspond to the `modulo` operation for negative numbers.\n              time = (value % 864e5 + 864e5) % 864e5;\n              // The hours, minutes, seconds, and milliseconds are obtained by\n              // decomposing the time within the day. See section 15.9.1.10.\n              hours = floor(time / 36e5) % 24;\n              minutes = floor(time / 6e4) % 60;\n              seconds = floor(time / 1e3) % 60;\n              milliseconds = time % 1e3;\n            };\n          } else {\n            getData = function (value) {\n              year = value.getUTCFullYear();\n              month = value.getUTCMonth();\n              date = value.getUTCDate();\n              hours = value.getUTCHours();\n              minutes = value.getUTCMinutes();\n              seconds = value.getUTCSeconds();\n              milliseconds = value.getUTCMilliseconds();\n            };\n          }\n          serializeDate = function (value) {\n            if (value > -1 / 0 && value < 1 / 0) {\n              // Dates are serialized according to the `Date#toJSON` method\n              // specified in ES 5.1 section 15.9.5.44. See section 15.9.1.15\n              // for the ISO 8601 date time string format.\n              getData(value);\n              // Serialize extended years correctly.\n              value = (year <= 0 || year >= 1e4 ? (year < 0 ? \"-\" : \"+\") + toPaddedString(6, year < 0 ? -year : year) : toPaddedString(4, year)) + \"-\" + toPaddedString(2, month + 1) + \"-\" + toPaddedString(2, date) +\n              // Months, dates, hours, minutes, and seconds should have two\n              // digits; milliseconds should have three.\n              \"T\" + toPaddedString(2, hours) + \":\" + toPaddedString(2, minutes) + \":\" + toPaddedString(2, seconds) +\n              // Milliseconds are optional in ES 5.0, but required in 5.1.\n              \".\" + toPaddedString(3, milliseconds) + \"Z\";\n              year = month = date = hours = minutes = seconds = milliseconds = null;\n            } else {\n              value = null;\n            }\n            return value;\n          };\n          return serializeDate(value);\n        };\n\n        // For environments with `JSON.stringify` but buggy date serialization,\n        // we override the native `Date#toJSON` implementation with a\n        // spec-compliant one.\n        if (has(\"json-stringify\") && !has(\"date-serialization\")) {\n          // Internal: the `Date#toJSON` implementation used to override the native one.\n          function dateToJSON(key) {\n            return serializeDate(this);\n          }\n\n          // Public: `JSON.stringify`. See ES 5.1 section 15.12.3.\n          var nativeStringify = exports.stringify;\n          exports.stringify = function (source, filter, width) {\n            var nativeToJSON = Date.prototype.toJSON;\n            Date.prototype.toJSON = dateToJSON;\n            var result = nativeStringify(source, filter, width);\n            Date.prototype.toJSON = nativeToJSON;\n            return result;\n          };\n        } else {\n          // Internal: Double-quotes a string `value`, replacing all ASCII control\n          // characters (characters with code unit values between 0 and 31) with\n          // their escaped equivalents. This is an implementation of the\n          // `Quote(value)` operation defined in ES 5.1 section 15.12.3.\n          var unicodePrefix = \"\\\\u00\";\n          var escapeChar = function (character) {\n            var charCode = character.charCodeAt(0),\n              escaped = Escapes[charCode];\n            if (escaped) {\n              return escaped;\n            }\n            return unicodePrefix + toPaddedString(2, charCode.toString(16));\n          };\n          var reEscape = /[\\x00-\\x1f\\x22\\x5c]/g;\n          var quote = function (value) {\n            reEscape.lastIndex = 0;\n            return '\"' + (reEscape.test(value) ? value.replace(reEscape, escapeChar) : value) + '\"';\n          };\n\n          // Internal: Recursively serializes an object. Implements the\n          // `Str(key, holder)`, `JO(value)`, and `JA(value)` operations.\n          var serialize = function (property, object, callback, properties, whitespace, indentation, stack) {\n            var value, type, className, results, element, index, length, prefix, result;\n            attempt(function () {\n              // Necessary for host object support.\n              value = object[property];\n            });\n            if (typeof value == \"object\" && value) {\n              if (value.getUTCFullYear && getClass.call(value) == dateClass && value.toJSON === Date.prototype.toJSON) {\n                value = serializeDate(value);\n              } else if (typeof value.toJSON == \"function\") {\n                value = value.toJSON(property);\n              }\n            }\n            if (callback) {\n              // If a replacement function was provided, call it to obtain the value\n              // for serialization.\n              value = callback.call(object, property, value);\n            }\n            // Exit early if value is `undefined` or `null`.\n            if (value == undefined) {\n              return value === undefined ? value : \"null\";\n            }\n            type = typeof value;\n            // Only call `getClass` if the value is an object.\n            if (type == \"object\") {\n              className = getClass.call(value);\n            }\n            switch (className || type) {\n              case \"boolean\":\n              case booleanClass:\n                // Booleans are represented literally.\n                return \"\" + value;\n              case \"number\":\n              case numberClass:\n                // JSON numbers must be finite. `Infinity` and `NaN` are serialized as\n                // `\"null\"`.\n                return value > -1 / 0 && value < 1 / 0 ? \"\" + value : \"null\";\n              case \"string\":\n              case stringClass:\n                // Strings are double-quoted and escaped.\n                return quote(\"\" + value);\n            }\n            // Recursively serialize objects and arrays.\n            if (typeof value == \"object\") {\n              // Check for cyclic structures. This is a linear search; performance\n              // is inversely proportional to the number of unique nested objects.\n              for (length = stack.length; length--;) {\n                if (stack[length] === value) {\n                  // Cyclic structures cannot be serialized by `JSON.stringify`.\n                  throw TypeError();\n                }\n              }\n              // Add the object to the stack of traversed objects.\n              stack.push(value);\n              results = [];\n              // Save the current indentation level and indent one additional level.\n              prefix = indentation;\n              indentation += whitespace;\n              if (className == arrayClass) {\n                // Recursively serialize array elements.\n                for (index = 0, length = value.length; index < length; index++) {\n                  element = serialize(index, value, callback, properties, whitespace, indentation, stack);\n                  results.push(element === undefined ? \"null\" : element);\n                }\n                result = results.length ? whitespace ? \"[\\n\" + indentation + results.join(\",\\n\" + indentation) + \"\\n\" + prefix + \"]\" : \"[\" + results.join(\",\") + \"]\" : \"[]\";\n              } else {\n                // Recursively serialize object members. Members are selected from\n                // either a user-specified list of property names, or the object\n                // itself.\n                forOwn(properties || value, function (property) {\n                  var element = serialize(property, value, callback, properties, whitespace, indentation, stack);\n                  if (element !== undefined) {\n                    // According to ES 5.1 section 15.12.3: \"If `gap` {whitespace}\n                    // is not the empty string, let `member` {quote(property) + \":\"}\n                    // be the concatenation of `member` and the `space` character.\"\n                    // The \"`space` character\" refers to the literal space\n                    // character, not the `space` {width} argument provided to\n                    // `JSON.stringify`.\n                    results.push(quote(property) + \":\" + (whitespace ? \" \" : \"\") + element);\n                  }\n                });\n                result = results.length ? whitespace ? \"{\\n\" + indentation + results.join(\",\\n\" + indentation) + \"\\n\" + prefix + \"}\" : \"{\" + results.join(\",\") + \"}\" : \"{}\";\n              }\n              // Remove the object from the traversed object stack.\n              stack.pop();\n              return result;\n            }\n          };\n\n          // Public: `JSON.stringify`. See ES 5.1 section 15.12.3.\n          exports.stringify = function (source, filter, width) {\n            var whitespace, callback, properties, className;\n            if (objectTypes[typeof filter] && filter) {\n              className = getClass.call(filter);\n              if (className == functionClass) {\n                callback = filter;\n              } else if (className == arrayClass) {\n                // Convert the property names array into a makeshift set.\n                properties = {};\n                for (var index = 0, length = filter.length, value; index < length;) {\n                  value = filter[index++];\n                  className = getClass.call(value);\n                  if (className == \"[object String]\" || className == \"[object Number]\") {\n                    properties[value] = 1;\n                  }\n                }\n              }\n            }\n            if (width) {\n              className = getClass.call(width);\n              if (className == numberClass) {\n                // Convert the `width` to an integer and create a string containing\n                // `width` number of space characters.\n                if ((width -= width % 1) > 0) {\n                  if (width > 10) {\n                    width = 10;\n                  }\n                  for (whitespace = \"\"; whitespace.length < width;) {\n                    whitespace += \" \";\n                  }\n                }\n              } else if (className == stringClass) {\n                whitespace = width.length <= 10 ? width : width.slice(0, 10);\n              }\n            }\n            // Opera <= 7.54u2 discards the values associated with empty string keys\n            // (`\"\"`) only if they are used directly within an object member list\n            // (e.g., `!(\"\" in { \"\": 1})`).\n            return serialize(\"\", (value = {}, value[\"\"] = source, value), callback, properties, whitespace, \"\", []);\n          };\n        }\n      }\n\n      // Public: Parses a JSON source string.\n      if (!has(\"json-parse\")) {\n        var fromCharCode = String.fromCharCode;\n\n        // Internal: A map of escaped control characters and their unescaped\n        // equivalents.\n        var Unescapes = {\n          92: \"\\\\\",\n          34: '\"',\n          47: \"/\",\n          98: \"\\b\",\n          116: \"\\t\",\n          110: \"\\n\",\n          102: \"\\f\",\n          114: \"\\r\"\n        };\n\n        // Internal: Stores the parser state.\n        var Index, Source;\n\n        // Internal: Resets the parser state and throws a `SyntaxError`.\n        var abort = function () {\n          Index = Source = null;\n          throw SyntaxError();\n        };\n\n        // Internal: Returns the next token, or `\"$\"` if the parser has reached\n        // the end of the source string. A token may be a string, number, `null`\n        // literal, or Boolean literal.\n        var lex = function () {\n          var source = Source,\n            length = source.length,\n            value,\n            begin,\n            position,\n            isSigned,\n            charCode;\n          while (Index < length) {\n            charCode = source.charCodeAt(Index);\n            switch (charCode) {\n              case 9:\n              case 10:\n              case 13:\n              case 32:\n                // Skip whitespace tokens, including tabs, carriage returns, line\n                // feeds, and space characters.\n                Index++;\n                break;\n              case 123:\n              case 125:\n              case 91:\n              case 93:\n              case 58:\n              case 44:\n                // Parse a punctuator token (`{`, `}`, `[`, `]`, `:`, or `,`) at\n                // the current position.\n                value = charIndexBuggy ? source.charAt(Index) : source[Index];\n                Index++;\n                return value;\n              case 34:\n                // `\"` delimits a JSON string; advance to the next character and\n                // begin parsing the string. String tokens are prefixed with the\n                // sentinel `@` character to distinguish them from punctuators and\n                // end-of-string tokens.\n                for (value = \"@\", Index++; Index < length;) {\n                  charCode = source.charCodeAt(Index);\n                  if (charCode < 32) {\n                    // Unescaped ASCII control characters (those with a code unit\n                    // less than the space character) are not permitted.\n                    abort();\n                  } else if (charCode == 92) {\n                    // A reverse solidus (`\\`) marks the beginning of an escaped\n                    // control character (including `\"`, `\\`, and `/`) or Unicode\n                    // escape sequence.\n                    charCode = source.charCodeAt(++Index);\n                    switch (charCode) {\n                      case 92:\n                      case 34:\n                      case 47:\n                      case 98:\n                      case 116:\n                      case 110:\n                      case 102:\n                      case 114:\n                        // Revive escaped control characters.\n                        value += Unescapes[charCode];\n                        Index++;\n                        break;\n                      case 117:\n                        // `\\u` marks the beginning of a Unicode escape sequence.\n                        // Advance to the first character and validate the\n                        // four-digit code point.\n                        begin = ++Index;\n                        for (position = Index + 4; Index < position; Index++) {\n                          charCode = source.charCodeAt(Index);\n                          // A valid sequence comprises four hexdigits (case-\n                          // insensitive) that form a single hexadecimal value.\n                          if (!(charCode >= 48 && charCode <= 57 || charCode >= 97 && charCode <= 102 || charCode >= 65 && charCode <= 70)) {\n                            // Invalid Unicode escape sequence.\n                            abort();\n                          }\n                        }\n                        // Revive the escaped character.\n                        value += fromCharCode(\"0x\" + source.slice(begin, Index));\n                        break;\n                      default:\n                        // Invalid escape sequence.\n                        abort();\n                    }\n                  } else {\n                    if (charCode == 34) {\n                      // An unescaped double-quote character marks the end of the\n                      // string.\n                      break;\n                    }\n                    charCode = source.charCodeAt(Index);\n                    begin = Index;\n                    // Optimize for the common case where a string is valid.\n                    while (charCode >= 32 && charCode != 92 && charCode != 34) {\n                      charCode = source.charCodeAt(++Index);\n                    }\n                    // Append the string as-is.\n                    value += source.slice(begin, Index);\n                  }\n                }\n                if (source.charCodeAt(Index) == 34) {\n                  // Advance to the next character and return the revived string.\n                  Index++;\n                  return value;\n                }\n                // Unterminated string.\n                abort();\n              default:\n                // Parse numbers and literals.\n                begin = Index;\n                // Advance past the negative sign, if one is specified.\n                if (charCode == 45) {\n                  isSigned = true;\n                  charCode = source.charCodeAt(++Index);\n                }\n                // Parse an integer or floating-point value.\n                if (charCode >= 48 && charCode <= 57) {\n                  // Leading zeroes are interpreted as octal literals.\n                  if (charCode == 48 && (charCode = source.charCodeAt(Index + 1), charCode >= 48 && charCode <= 57)) {\n                    // Illegal octal literal.\n                    abort();\n                  }\n                  isSigned = false;\n                  // Parse the integer component.\n                  for (; Index < length && (charCode = source.charCodeAt(Index), charCode >= 48 && charCode <= 57); Index++);\n                  // Floats cannot contain a leading decimal point; however, this\n                  // case is already accounted for by the parser.\n                  if (source.charCodeAt(Index) == 46) {\n                    position = ++Index;\n                    // Parse the decimal component.\n                    for (; position < length; position++) {\n                      charCode = source.charCodeAt(position);\n                      if (charCode < 48 || charCode > 57) {\n                        break;\n                      }\n                    }\n                    if (position == Index) {\n                      // Illegal trailing decimal.\n                      abort();\n                    }\n                    Index = position;\n                  }\n                  // Parse exponents. The `e` denoting the exponent is\n                  // case-insensitive.\n                  charCode = source.charCodeAt(Index);\n                  if (charCode == 101 || charCode == 69) {\n                    charCode = source.charCodeAt(++Index);\n                    // Skip past the sign following the exponent, if one is\n                    // specified.\n                    if (charCode == 43 || charCode == 45) {\n                      Index++;\n                    }\n                    // Parse the exponential component.\n                    for (position = Index; position < length; position++) {\n                      charCode = source.charCodeAt(position);\n                      if (charCode < 48 || charCode > 57) {\n                        break;\n                      }\n                    }\n                    if (position == Index) {\n                      // Illegal empty exponent.\n                      abort();\n                    }\n                    Index = position;\n                  }\n                  // Coerce the parsed value to a JavaScript number.\n                  return +source.slice(begin, Index);\n                }\n                // A negative sign may only precede numbers.\n                if (isSigned) {\n                  abort();\n                }\n                // `true`, `false`, and `null` literals.\n                var temp = source.slice(Index, Index + 4);\n                if (temp == \"true\") {\n                  Index += 4;\n                  return true;\n                } else if (temp == \"fals\" && source.charCodeAt(Index + 4) == 101) {\n                  Index += 5;\n                  return false;\n                } else if (temp == \"null\") {\n                  Index += 4;\n                  return null;\n                }\n                // Unrecognized token.\n                abort();\n            }\n          }\n          // Return the sentinel `$` character if the parser has reached the end\n          // of the source string.\n          return \"$\";\n        };\n\n        // Internal: Parses a JSON `value` token.\n        var get = function (value) {\n          var results, hasMembers;\n          if (value == \"$\") {\n            // Unexpected end of input.\n            abort();\n          }\n          if (typeof value == \"string\") {\n            if ((charIndexBuggy ? value.charAt(0) : value[0]) == \"@\") {\n              // Remove the sentinel `@` character.\n              return value.slice(1);\n            }\n            // Parse object and array literals.\n            if (value == \"[\") {\n              // Parses a JSON array, returning a new JavaScript array.\n              results = [];\n              for (;;) {\n                value = lex();\n                // A closing square bracket marks the end of the array literal.\n                if (value == \"]\") {\n                  break;\n                }\n                // If the array literal contains elements, the current token\n                // should be a comma separating the previous element from the\n                // next.\n                if (hasMembers) {\n                  if (value == \",\") {\n                    value = lex();\n                    if (value == \"]\") {\n                      // Unexpected trailing `,` in array literal.\n                      abort();\n                    }\n                  } else {\n                    // A `,` must separate each array element.\n                    abort();\n                  }\n                } else {\n                  hasMembers = true;\n                }\n                // Elisions and leading commas are not permitted.\n                if (value == \",\") {\n                  abort();\n                }\n                results.push(get(value));\n              }\n              return results;\n            } else if (value == \"{\") {\n              // Parses a JSON object, returning a new JavaScript object.\n              results = {};\n              for (;;) {\n                value = lex();\n                // A closing curly brace marks the end of the object literal.\n                if (value == \"}\") {\n                  break;\n                }\n                // If the object literal contains members, the current token\n                // should be a comma separator.\n                if (hasMembers) {\n                  if (value == \",\") {\n                    value = lex();\n                    if (value == \"}\") {\n                      // Unexpected trailing `,` in object literal.\n                      abort();\n                    }\n                  } else {\n                    // A `,` must separate each object member.\n                    abort();\n                  }\n                } else {\n                  hasMembers = true;\n                }\n                // Leading commas are not permitted, object property names must be\n                // double-quoted strings, and a `:` must separate each property\n                // name and value.\n                if (value == \",\" || typeof value != \"string\" || (charIndexBuggy ? value.charAt(0) : value[0]) != \"@\" || lex() != \":\") {\n                  abort();\n                }\n                results[value.slice(1)] = get(lex());\n              }\n              return results;\n            }\n            // Unexpected token encountered.\n            abort();\n          }\n          return value;\n        };\n\n        // Internal: Updates a traversed object member.\n        var update = function (source, property, callback) {\n          var element = walk(source, property, callback);\n          if (element === undefined) {\n            delete source[property];\n          } else {\n            source[property] = element;\n          }\n        };\n\n        // Internal: Recursively traverses a parsed JSON object, invoking the\n        // `callback` function for each value. This is an implementation of the\n        // `Walk(holder, name)` operation defined in ES 5.1 section 15.12.2.\n        var walk = function (source, property, callback) {\n          var value = source[property],\n            length;\n          if (typeof value == \"object\" && value) {\n            // `forOwn` can't be used to traverse an array in Opera <= 8.54\n            // because its `Object#hasOwnProperty` implementation returns `false`\n            // for array indices (e.g., `![1, 2, 3].hasOwnProperty(\"0\")`).\n            if (getClass.call(value) == arrayClass) {\n              for (length = value.length; length--;) {\n                update(getClass, forOwn, value, length, callback);\n              }\n            } else {\n              forOwn(value, function (property) {\n                update(value, property, callback);\n              });\n            }\n          }\n          return callback.call(source, property, value);\n        };\n\n        // Public: `JSON.parse`. See ES 5.1 section 15.12.2.\n        exports.parse = function (source, callback) {\n          var result, value;\n          Index = 0;\n          Source = \"\" + source;\n          result = get(lex());\n          // If a JSON string contains multiple tokens, it is invalid.\n          if (lex() != \"$\") {\n            abort();\n          }\n          // Reset the parser state.\n          Index = Source = null;\n          return callback && getClass.call(callback) == functionClass ? walk((value = {}, value[\"\"] = result, value), \"\", callback) : result;\n        };\n      }\n    }\n    exports.runInContext = runInContext;\n    return exports;\n  }\n  if (freeExports && !isLoader) {\n    // Export for CommonJS environments.\n    runInContext(root, freeExports);\n  } else {\n    // Export for web browsers and JavaScript engines.\n    var nativeJSON = root.JSON,\n      previousJSON = root.JSON3,\n      isRestored = false;\n    var JSON3 = runInContext(root, root.JSON3 = {\n      // Public: Restores the original value of the global `JSON` object and\n      // returns a reference to the `JSON3` object.\n      \"noConflict\": function () {\n        if (!isRestored) {\n          isRestored = true;\n          root.JSON = nativeJSON;\n          root.JSON3 = previousJSON;\n          nativeJSON = previousJSON = null;\n        }\n        return JSON3;\n      }\n    });\n    root.JSON = {\n      \"parse\": JSON3.parse,\n      \"stringify\": JSON3.stringify\n    };\n  }\n\n  // Export for asynchronous module loaders.\n  if (isLoader) {\n    define(function () {\n      return JSON3;\n    });\n  }\n}).call(this);","map":{"version":3,"names":["isLoader","define","amd","objectTypes","freeExports","exports","nodeType","root","window","freeGlobal","module","global","self","runInContext","context","Object","Number","String","Date","SyntaxError","TypeError","Math","nativeJSON","JSON","stringify","parse","objectProto","prototype","getClass","toString","isProperty","hasOwnProperty","undefined","attempt","func","errorFunc","exception","isExtended","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","has","name","isSupported","value","serialized","stringifySupported","toJSON","parseSupported","length","functionClass","dateClass","numberClass","stringClass","arrayClass","booleanClass","charIndexBuggy","forOwn","object","callback","size","Properties","dontEnums","property","valueOf","call","isFunction","hasProperty","constructor","isConstructor","Escapes","leadingZeroes","toPaddedString","width","slice","serializeDate","getData","year","month","date","time","hours","minutes","seconds","milliseconds","floor","Months","getDay","dateToJSON","key","nativeStringify","source","filter","nativeToJSON","result","unicodePrefix","escapeChar","character","charCode","charCodeAt","escaped","reEscape","quote","lastIndex","test","replace","serialize","properties","whitespace","indentation","stack","type","className","results","element","index","prefix","push","join","pop","fromCharCode","Unescapes","Index","Source","abort","lex","begin","position","isSigned","charAt","temp","get","hasMembers","update","walk","previousJSON","JSON3","isRestored"],"sources":["/Users/tottran/Documents/Bitbucket/toithietkephp/node_modules/json3/lib/json3.js"],"sourcesContent":["/*! JSON v3.3.2 | https://bestiejs.github.io/json3 | Copyright 2012-2015, Kit Cambridge, Benjamin Tan | http://kit.mit-license.org */\n;(function () {\n  // Detect the `define` function exposed by asynchronous module loaders. The\n  // strict `define` check is necessary for compatibility with `r.js`.\n  var isLoader = typeof define === \"function\" && define.amd;\n\n  // A set of types used to distinguish objects from primitives.\n  var objectTypes = {\n    \"function\": true,\n    \"object\": true\n  };\n\n  // Detect the `exports` object exposed by CommonJS implementations.\n  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;\n\n  // Use the `global` object exposed by Node (including Browserify via\n  // `insert-module-globals`), Narwhal, and Ringo as the default context,\n  // and the `window` object in browsers. Rhino exports a `global` function\n  // instead.\n  var root = objectTypes[typeof window] && window || this,\n      freeGlobal = freeExports && objectTypes[typeof module] && module && !module.nodeType && typeof global == \"object\" && global;\n\n  if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal)) {\n    root = freeGlobal;\n  }\n\n  // Public: Initializes JSON 3 using the given `context` object, attaching the\n  // `stringify` and `parse` functions to the specified `exports` object.\n  function runInContext(context, exports) {\n    context || (context = root.Object());\n    exports || (exports = root.Object());\n\n    // Native constructor aliases.\n    var Number = context.Number || root.Number,\n        String = context.String || root.String,\n        Object = context.Object || root.Object,\n        Date = context.Date || root.Date,\n        SyntaxError = context.SyntaxError || root.SyntaxError,\n        TypeError = context.TypeError || root.TypeError,\n        Math = context.Math || root.Math,\n        nativeJSON = context.JSON || root.JSON;\n\n    // Delegate to the native `stringify` and `parse` implementations.\n    if (typeof nativeJSON == \"object\" && nativeJSON) {\n      exports.stringify = nativeJSON.stringify;\n      exports.parse = nativeJSON.parse;\n    }\n\n    // Convenience aliases.\n    var objectProto = Object.prototype,\n        getClass = objectProto.toString,\n        isProperty = objectProto.hasOwnProperty,\n        undefined;\n\n    // Internal: Contains `try...catch` logic used by other functions.\n    // This prevents other functions from being deoptimized.\n    function attempt(func, errorFunc) {\n      try {\n        func();\n      } catch (exception) {\n        if (errorFunc) {\n          errorFunc();\n        }\n      }\n    }\n\n    // Test the `Date#getUTC*` methods. Based on work by @Yaffle.\n    var isExtended = new Date(-3509827334573292);\n    attempt(function () {\n      // The `getUTCFullYear`, `Month`, and `Date` methods return nonsensical\n      // results for certain dates in Opera >= 10.53.\n      isExtended = isExtended.getUTCFullYear() == -109252 && isExtended.getUTCMonth() === 0 && isExtended.getUTCDate() === 1 &&\n        isExtended.getUTCHours() == 10 && isExtended.getUTCMinutes() == 37 && isExtended.getUTCSeconds() == 6 && isExtended.getUTCMilliseconds() == 708;\n    });\n\n    // Internal: Determines whether the native `JSON.stringify` and `parse`\n    // implementations are spec-compliant. Based on work by Ken Snyder.\n    function has(name) {\n      if (has[name] != null) {\n        // Return cached feature test result.\n        return has[name];\n      }\n      var isSupported;\n      if (name == \"bug-string-char-index\") {\n        // IE <= 7 doesn't support accessing string characters using square\n        // bracket notation. IE 8 only supports this for primitives.\n        isSupported = \"a\"[0] != \"a\";\n      } else if (name == \"json\") {\n        // Indicates whether both `JSON.stringify` and `JSON.parse` are\n        // supported.\n        isSupported = has(\"json-stringify\") && has(\"date-serialization\") && has(\"json-parse\");\n      } else if (name == \"date-serialization\") {\n        // Indicates whether `Date`s can be serialized accurately by `JSON.stringify`.\n        isSupported = has(\"json-stringify\") && isExtended;\n        if (isSupported) {\n          var stringify = exports.stringify;\n          attempt(function () {\n            isSupported =\n              // JSON 2, Prototype <= 1.7, and older WebKit builds incorrectly\n              // serialize extended years.\n              stringify(new Date(-8.64e15)) == '\"-271821-04-20T00:00:00.000Z\"' &&\n              // The milliseconds are optional in ES 5, but required in 5.1.\n              stringify(new Date(8.64e15)) == '\"+275760-09-13T00:00:00.000Z\"' &&\n              // Firefox <= 11.0 incorrectly serializes years prior to 0 as negative\n              // four-digit years instead of six-digit years. Credits: @Yaffle.\n              stringify(new Date(-621987552e5)) == '\"-000001-01-01T00:00:00.000Z\"' &&\n              // Safari <= 5.1.5 and Opera >= 10.53 incorrectly serialize millisecond\n              // values less than 1000. Credits: @Yaffle.\n              stringify(new Date(-1)) == '\"1969-12-31T23:59:59.999Z\"';\n          });\n        }\n      } else {\n        var value, serialized = '{\"a\":[1,true,false,null,\"\\\\u0000\\\\b\\\\n\\\\f\\\\r\\\\t\"]}';\n        // Test `JSON.stringify`.\n        if (name == \"json-stringify\") {\n          var stringify = exports.stringify, stringifySupported = typeof stringify == \"function\";\n          if (stringifySupported) {\n            // A test function object with a custom `toJSON` method.\n            (value = function () {\n              return 1;\n            }).toJSON = value;\n            attempt(function () {\n              stringifySupported =\n                // Firefox 3.1b1 and b2 serialize string, number, and boolean\n                // primitives as object literals.\n                stringify(0) === \"0\" &&\n                // FF 3.1b1, b2, and JSON 2 serialize wrapped primitives as object\n                // literals.\n                stringify(new Number()) === \"0\" &&\n                stringify(new String()) == '\"\"' &&\n                // FF 3.1b1, 2 throw an error if the value is `null`, `undefined`, or\n                // does not define a canonical JSON representation (this applies to\n                // objects with `toJSON` properties as well, *unless* they are nested\n                // within an object or array).\n                stringify(getClass) === undefined &&\n                // IE 8 serializes `undefined` as `\"undefined\"`. Safari <= 5.1.7 and\n                // FF 3.1b3 pass this test.\n                stringify(undefined) === undefined &&\n                // Safari <= 5.1.7 and FF 3.1b3 throw `Error`s and `TypeError`s,\n                // respectively, if the value is omitted entirely.\n                stringify() === undefined &&\n                // FF 3.1b1, 2 throw an error if the given value is not a number,\n                // string, array, object, Boolean, or `null` literal. This applies to\n                // objects with custom `toJSON` methods as well, unless they are nested\n                // inside object or array literals. YUI 3.0.0b1 ignores custom `toJSON`\n                // methods entirely.\n                stringify(value) === \"1\" &&\n                stringify([value]) == \"[1]\" &&\n                // Prototype <= 1.6.1 serializes `[undefined]` as `\"[]\"` instead of\n                // `\"[null]\"`.\n                stringify([undefined]) == \"[null]\" &&\n                // YUI 3.0.0b1 fails to serialize `null` literals.\n                stringify(null) == \"null\" &&\n                // FF 3.1b1, 2 halts serialization if an array contains a function:\n                // `[1, true, getClass, 1]` serializes as \"[1,true,],\". FF 3.1b3\n                // elides non-JSON values from objects and arrays, unless they\n                // define custom `toJSON` methods.\n                stringify([undefined, getClass, null]) == \"[null,null,null]\" &&\n                // Simple serialization test. FF 3.1b1 uses Unicode escape sequences\n                // where character escape codes are expected (e.g., `\\b` => `\\u0008`).\n                stringify({ \"a\": [value, true, false, null, \"\\x00\\b\\n\\f\\r\\t\"] }) == serialized &&\n                // FF 3.1b1 and b2 ignore the `filter` and `width` arguments.\n                stringify(null, value) === \"1\" &&\n                stringify([1, 2], null, 1) == \"[\\n 1,\\n 2\\n]\";\n            }, function () {\n              stringifySupported = false;\n            });\n          }\n          isSupported = stringifySupported;\n        }\n        // Test `JSON.parse`.\n        if (name == \"json-parse\") {\n          var parse = exports.parse, parseSupported;\n          if (typeof parse == \"function\") {\n            attempt(function () {\n              // FF 3.1b1, b2 will throw an exception if a bare literal is provided.\n              // Conforming implementations should also coerce the initial argument to\n              // a string prior to parsing.\n              if (parse(\"0\") === 0 && !parse(false)) {\n                // Simple parsing test.\n                value = parse(serialized);\n                parseSupported = value[\"a\"].length == 5 && value[\"a\"][0] === 1;\n                if (parseSupported) {\n                  attempt(function () {\n                    // Safari <= 5.1.2 and FF 3.1b1 allow unescaped tabs in strings.\n                    parseSupported = !parse('\"\\t\"');\n                  });\n                  if (parseSupported) {\n                    attempt(function () {\n                      // FF 4.0 and 4.0.1 allow leading `+` signs and leading\n                      // decimal points. FF 4.0, 4.0.1, and IE 9-10 also allow\n                      // certain octal literals.\n                      parseSupported = parse(\"01\") !== 1;\n                    });\n                  }\n                  if (parseSupported) {\n                    attempt(function () {\n                      // FF 4.0, 4.0.1, and Rhino 1.7R3-R4 allow trailing decimal\n                      // points. These environments, along with FF 3.1b1 and 2,\n                      // also allow trailing commas in JSON objects and arrays.\n                      parseSupported = parse(\"1.\") !== 1;\n                    });\n                  }\n                }\n              }\n            }, function () {\n              parseSupported = false;\n            });\n          }\n          isSupported = parseSupported;\n        }\n      }\n      return has[name] = !!isSupported;\n    }\n    has[\"bug-string-char-index\"] = has[\"date-serialization\"] = has[\"json\"] = has[\"json-stringify\"] = has[\"json-parse\"] = null;\n\n    if (!has(\"json\")) {\n      // Common `[[Class]]` name aliases.\n      var functionClass = \"[object Function]\",\n          dateClass = \"[object Date]\",\n          numberClass = \"[object Number]\",\n          stringClass = \"[object String]\",\n          arrayClass = \"[object Array]\",\n          booleanClass = \"[object Boolean]\";\n\n      // Detect incomplete support for accessing string characters by index.\n      var charIndexBuggy = has(\"bug-string-char-index\");\n\n      // Internal: Normalizes the `for...in` iteration algorithm across\n      // environments. Each enumerated key is yielded to a `callback` function.\n      var forOwn = function (object, callback) {\n        var size = 0, Properties, dontEnums, property;\n\n        // Tests for bugs in the current environment's `for...in` algorithm. The\n        // `valueOf` property inherits the non-enumerable flag from\n        // `Object.prototype` in older versions of IE, Netscape, and Mozilla.\n        (Properties = function () {\n          this.valueOf = 0;\n        }).prototype.valueOf = 0;\n\n        // Iterate over a new instance of the `Properties` class.\n        dontEnums = new Properties();\n        for (property in dontEnums) {\n          // Ignore all properties inherited from `Object.prototype`.\n          if (isProperty.call(dontEnums, property)) {\n            size++;\n          }\n        }\n        Properties = dontEnums = null;\n\n        // Normalize the iteration algorithm.\n        if (!size) {\n          // A list of non-enumerable properties inherited from `Object.prototype`.\n          dontEnums = [\"valueOf\", \"toString\", \"toLocaleString\", \"propertyIsEnumerable\", \"isPrototypeOf\", \"hasOwnProperty\", \"constructor\"];\n          // IE <= 8, Mozilla 1.0, and Netscape 6.2 ignore shadowed non-enumerable\n          // properties.\n          forOwn = function (object, callback) {\n            var isFunction = getClass.call(object) == functionClass, property, length;\n            var hasProperty = !isFunction && typeof object.constructor != \"function\" && objectTypes[typeof object.hasOwnProperty] && object.hasOwnProperty || isProperty;\n            for (property in object) {\n              // Gecko <= 1.0 enumerates the `prototype` property of functions under\n              // certain conditions; IE does not.\n              if (!(isFunction && property == \"prototype\") && hasProperty.call(object, property)) {\n                callback(property);\n              }\n            }\n            // Manually invoke the callback for each non-enumerable property.\n            for (length = dontEnums.length; property = dontEnums[--length];) {\n              if (hasProperty.call(object, property)) {\n                callback(property);\n              }\n            }\n          };\n        } else {\n          // No bugs detected; use the standard `for...in` algorithm.\n          forOwn = function (object, callback) {\n            var isFunction = getClass.call(object) == functionClass, property, isConstructor;\n            for (property in object) {\n              if (!(isFunction && property == \"prototype\") && isProperty.call(object, property) && !(isConstructor = property === \"constructor\")) {\n                callback(property);\n              }\n            }\n            // Manually invoke the callback for the `constructor` property due to\n            // cross-environment inconsistencies.\n            if (isConstructor || isProperty.call(object, (property = \"constructor\"))) {\n              callback(property);\n            }\n          };\n        }\n        return forOwn(object, callback);\n      };\n\n      // Public: Serializes a JavaScript `value` as a JSON string. The optional\n      // `filter` argument may specify either a function that alters how object and\n      // array members are serialized, or an array of strings and numbers that\n      // indicates which properties should be serialized. The optional `width`\n      // argument may be either a string or number that specifies the indentation\n      // level of the output.\n      if (!has(\"json-stringify\") && !has(\"date-serialization\")) {\n        // Internal: A map of control characters and their escaped equivalents.\n        var Escapes = {\n          92: \"\\\\\\\\\",\n          34: '\\\\\"',\n          8: \"\\\\b\",\n          12: \"\\\\f\",\n          10: \"\\\\n\",\n          13: \"\\\\r\",\n          9: \"\\\\t\"\n        };\n\n        // Internal: Converts `value` into a zero-padded string such that its\n        // length is at least equal to `width`. The `width` must be <= 6.\n        var leadingZeroes = \"000000\";\n        var toPaddedString = function (width, value) {\n          // The `|| 0` expression is necessary to work around a bug in\n          // Opera <= 7.54u2 where `0 == -0`, but `String(-0) !== \"0\"`.\n          return (leadingZeroes + (value || 0)).slice(-width);\n        };\n\n        // Internal: Serializes a date object.\n        var serializeDate = function (value) {\n          var getData, year, month, date, time, hours, minutes, seconds, milliseconds;\n          // Define additional utility methods if the `Date` methods are buggy.\n          if (!isExtended) {\n            var floor = Math.floor;\n            // A mapping between the months of the year and the number of days between\n            // January 1st and the first of the respective month.\n            var Months = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];\n            // Internal: Calculates the number of days between the Unix epoch and the\n            // first day of the given month.\n            var getDay = function (year, month) {\n              return Months[month] + 365 * (year - 1970) + floor((year - 1969 + (month = +(month > 1))) / 4) - floor((year - 1901 + month) / 100) + floor((year - 1601 + month) / 400);\n            };\n            getData = function (value) {\n              // Manually compute the year, month, date, hours, minutes,\n              // seconds, and milliseconds if the `getUTC*` methods are\n              // buggy. Adapted from @Yaffle's `date-shim` project.\n              date = floor(value / 864e5);\n              for (year = floor(date / 365.2425) + 1970 - 1; getDay(year + 1, 0) <= date; year++);\n              for (month = floor((date - getDay(year, 0)) / 30.42); getDay(year, month + 1) <= date; month++);\n              date = 1 + date - getDay(year, month);\n              // The `time` value specifies the time within the day (see ES\n              // 5.1 section 15.9.1.2). The formula `(A % B + B) % B` is used\n              // to compute `A modulo B`, as the `%` operator does not\n              // correspond to the `modulo` operation for negative numbers.\n              time = (value % 864e5 + 864e5) % 864e5;\n              // The hours, minutes, seconds, and milliseconds are obtained by\n              // decomposing the time within the day. See section 15.9.1.10.\n              hours = floor(time / 36e5) % 24;\n              minutes = floor(time / 6e4) % 60;\n              seconds = floor(time / 1e3) % 60;\n              milliseconds = time % 1e3;\n            };\n          } else {\n            getData = function (value) {\n              year = value.getUTCFullYear();\n              month = value.getUTCMonth();\n              date = value.getUTCDate();\n              hours = value.getUTCHours();\n              minutes = value.getUTCMinutes();\n              seconds = value.getUTCSeconds();\n              milliseconds = value.getUTCMilliseconds();\n            };\n          }\n          serializeDate = function (value) {\n            if (value > -1 / 0 && value < 1 / 0) {\n              // Dates are serialized according to the `Date#toJSON` method\n              // specified in ES 5.1 section 15.9.5.44. See section 15.9.1.15\n              // for the ISO 8601 date time string format.\n              getData(value);\n              // Serialize extended years correctly.\n              value = (year <= 0 || year >= 1e4 ? (year < 0 ? \"-\" : \"+\") + toPaddedString(6, year < 0 ? -year : year) : toPaddedString(4, year)) +\n              \"-\" + toPaddedString(2, month + 1) + \"-\" + toPaddedString(2, date) +\n              // Months, dates, hours, minutes, and seconds should have two\n              // digits; milliseconds should have three.\n              \"T\" + toPaddedString(2, hours) + \":\" + toPaddedString(2, minutes) + \":\" + toPaddedString(2, seconds) +\n              // Milliseconds are optional in ES 5.0, but required in 5.1.\n              \".\" + toPaddedString(3, milliseconds) + \"Z\";\n              year = month = date = hours = minutes = seconds = milliseconds = null;\n            } else {\n              value = null;\n            }\n            return value;\n          };\n          return serializeDate(value);\n        };\n\n        // For environments with `JSON.stringify` but buggy date serialization,\n        // we override the native `Date#toJSON` implementation with a\n        // spec-compliant one.\n        if (has(\"json-stringify\") && !has(\"date-serialization\")) {\n          // Internal: the `Date#toJSON` implementation used to override the native one.\n          function dateToJSON (key) {\n            return serializeDate(this);\n          }\n\n          // Public: `JSON.stringify`. See ES 5.1 section 15.12.3.\n          var nativeStringify = exports.stringify;\n          exports.stringify = function (source, filter, width) {\n            var nativeToJSON = Date.prototype.toJSON;\n            Date.prototype.toJSON = dateToJSON;\n            var result = nativeStringify(source, filter, width);\n            Date.prototype.toJSON = nativeToJSON;\n            return result;\n          }\n        } else {\n          // Internal: Double-quotes a string `value`, replacing all ASCII control\n          // characters (characters with code unit values between 0 and 31) with\n          // their escaped equivalents. This is an implementation of the\n          // `Quote(value)` operation defined in ES 5.1 section 15.12.3.\n          var unicodePrefix = \"\\\\u00\";\n          var escapeChar = function (character) {\n            var charCode = character.charCodeAt(0), escaped = Escapes[charCode];\n            if (escaped) {\n              return escaped;\n            }\n            return unicodePrefix + toPaddedString(2, charCode.toString(16));\n          };\n          var reEscape = /[\\x00-\\x1f\\x22\\x5c]/g;\n          var quote = function (value) {\n            reEscape.lastIndex = 0;\n            return '\"' +\n              (\n                reEscape.test(value)\n                  ? value.replace(reEscape, escapeChar)\n                  : value\n              ) +\n              '\"';\n          };\n\n          // Internal: Recursively serializes an object. Implements the\n          // `Str(key, holder)`, `JO(value)`, and `JA(value)` operations.\n          var serialize = function (property, object, callback, properties, whitespace, indentation, stack) {\n            var value, type, className, results, element, index, length, prefix, result;\n            attempt(function () {\n              // Necessary for host object support.\n              value = object[property];\n            });\n            if (typeof value == \"object\" && value) {\n              if (value.getUTCFullYear && getClass.call(value) == dateClass && value.toJSON === Date.prototype.toJSON) {\n                value = serializeDate(value);\n              } else if (typeof value.toJSON == \"function\") {\n                value = value.toJSON(property);\n              }\n            }\n            if (callback) {\n              // If a replacement function was provided, call it to obtain the value\n              // for serialization.\n              value = callback.call(object, property, value);\n            }\n            // Exit early if value is `undefined` or `null`.\n            if (value == undefined) {\n              return value === undefined ? value : \"null\";\n            }\n            type = typeof value;\n            // Only call `getClass` if the value is an object.\n            if (type == \"object\") {\n              className = getClass.call(value);\n            }\n            switch (className || type) {\n              case \"boolean\":\n              case booleanClass:\n                // Booleans are represented literally.\n                return \"\" + value;\n              case \"number\":\n              case numberClass:\n                // JSON numbers must be finite. `Infinity` and `NaN` are serialized as\n                // `\"null\"`.\n                return value > -1 / 0 && value < 1 / 0 ? \"\" + value : \"null\";\n              case \"string\":\n              case stringClass:\n                // Strings are double-quoted and escaped.\n                return quote(\"\" + value);\n            }\n            // Recursively serialize objects and arrays.\n            if (typeof value == \"object\") {\n              // Check for cyclic structures. This is a linear search; performance\n              // is inversely proportional to the number of unique nested objects.\n              for (length = stack.length; length--;) {\n                if (stack[length] === value) {\n                  // Cyclic structures cannot be serialized by `JSON.stringify`.\n                  throw TypeError();\n                }\n              }\n              // Add the object to the stack of traversed objects.\n              stack.push(value);\n              results = [];\n              // Save the current indentation level and indent one additional level.\n              prefix = indentation;\n              indentation += whitespace;\n              if (className == arrayClass) {\n                // Recursively serialize array elements.\n                for (index = 0, length = value.length; index < length; index++) {\n                  element = serialize(index, value, callback, properties, whitespace, indentation, stack);\n                  results.push(element === undefined ? \"null\" : element);\n                }\n                result = results.length ? (whitespace ? \"[\\n\" + indentation + results.join(\",\\n\" + indentation) + \"\\n\" + prefix + \"]\" : (\"[\" + results.join(\",\") + \"]\")) : \"[]\";\n              } else {\n                // Recursively serialize object members. Members are selected from\n                // either a user-specified list of property names, or the object\n                // itself.\n                forOwn(properties || value, function (property) {\n                  var element = serialize(property, value, callback, properties, whitespace, indentation, stack);\n                  if (element !== undefined) {\n                    // According to ES 5.1 section 15.12.3: \"If `gap` {whitespace}\n                    // is not the empty string, let `member` {quote(property) + \":\"}\n                    // be the concatenation of `member` and the `space` character.\"\n                    // The \"`space` character\" refers to the literal space\n                    // character, not the `space` {width} argument provided to\n                    // `JSON.stringify`.\n                    results.push(quote(property) + \":\" + (whitespace ? \" \" : \"\") + element);\n                  }\n                });\n                result = results.length ? (whitespace ? \"{\\n\" + indentation + results.join(\",\\n\" + indentation) + \"\\n\" + prefix + \"}\" : (\"{\" + results.join(\",\") + \"}\")) : \"{}\";\n              }\n              // Remove the object from the traversed object stack.\n              stack.pop();\n              return result;\n            }\n          };\n\n          // Public: `JSON.stringify`. See ES 5.1 section 15.12.3.\n          exports.stringify = function (source, filter, width) {\n            var whitespace, callback, properties, className;\n            if (objectTypes[typeof filter] && filter) {\n              className = getClass.call(filter);\n              if (className == functionClass) {\n                callback = filter;\n              } else if (className == arrayClass) {\n                // Convert the property names array into a makeshift set.\n                properties = {};\n                for (var index = 0, length = filter.length, value; index < length;) {\n                  value = filter[index++];\n                  className = getClass.call(value);\n                  if (className == \"[object String]\" || className == \"[object Number]\") {\n                    properties[value] = 1;\n                  }\n                }\n              }\n            }\n            if (width) {\n              className = getClass.call(width);\n              if (className == numberClass) {\n                // Convert the `width` to an integer and create a string containing\n                // `width` number of space characters.\n                if ((width -= width % 1) > 0) {\n                  if (width > 10) {\n                    width = 10;\n                  }\n                  for (whitespace = \"\"; whitespace.length < width;) {\n                    whitespace += \" \";\n                  }\n                }\n              } else if (className == stringClass) {\n                whitespace = width.length <= 10 ? width : width.slice(0, 10);\n              }\n            }\n            // Opera <= 7.54u2 discards the values associated with empty string keys\n            // (`\"\"`) only if they are used directly within an object member list\n            // (e.g., `!(\"\" in { \"\": 1})`).\n            return serialize(\"\", (value = {}, value[\"\"] = source, value), callback, properties, whitespace, \"\", []);\n          };\n        }\n      }\n\n      // Public: Parses a JSON source string.\n      if (!has(\"json-parse\")) {\n        var fromCharCode = String.fromCharCode;\n\n        // Internal: A map of escaped control characters and their unescaped\n        // equivalents.\n        var Unescapes = {\n          92: \"\\\\\",\n          34: '\"',\n          47: \"/\",\n          98: \"\\b\",\n          116: \"\\t\",\n          110: \"\\n\",\n          102: \"\\f\",\n          114: \"\\r\"\n        };\n\n        // Internal: Stores the parser state.\n        var Index, Source;\n\n        // Internal: Resets the parser state and throws a `SyntaxError`.\n        var abort = function () {\n          Index = Source = null;\n          throw SyntaxError();\n        };\n\n        // Internal: Returns the next token, or `\"$\"` if the parser has reached\n        // the end of the source string. A token may be a string, number, `null`\n        // literal, or Boolean literal.\n        var lex = function () {\n          var source = Source, length = source.length, value, begin, position, isSigned, charCode;\n          while (Index < length) {\n            charCode = source.charCodeAt(Index);\n            switch (charCode) {\n              case 9: case 10: case 13: case 32:\n                // Skip whitespace tokens, including tabs, carriage returns, line\n                // feeds, and space characters.\n                Index++;\n                break;\n              case 123: case 125: case 91: case 93: case 58: case 44:\n                // Parse a punctuator token (`{`, `}`, `[`, `]`, `:`, or `,`) at\n                // the current position.\n                value = charIndexBuggy ? source.charAt(Index) : source[Index];\n                Index++;\n                return value;\n              case 34:\n                // `\"` delimits a JSON string; advance to the next character and\n                // begin parsing the string. String tokens are prefixed with the\n                // sentinel `@` character to distinguish them from punctuators and\n                // end-of-string tokens.\n                for (value = \"@\", Index++; Index < length;) {\n                  charCode = source.charCodeAt(Index);\n                  if (charCode < 32) {\n                    // Unescaped ASCII control characters (those with a code unit\n                    // less than the space character) are not permitted.\n                    abort();\n                  } else if (charCode == 92) {\n                    // A reverse solidus (`\\`) marks the beginning of an escaped\n                    // control character (including `\"`, `\\`, and `/`) or Unicode\n                    // escape sequence.\n                    charCode = source.charCodeAt(++Index);\n                    switch (charCode) {\n                      case 92: case 34: case 47: case 98: case 116: case 110: case 102: case 114:\n                        // Revive escaped control characters.\n                        value += Unescapes[charCode];\n                        Index++;\n                        break;\n                      case 117:\n                        // `\\u` marks the beginning of a Unicode escape sequence.\n                        // Advance to the first character and validate the\n                        // four-digit code point.\n                        begin = ++Index;\n                        for (position = Index + 4; Index < position; Index++) {\n                          charCode = source.charCodeAt(Index);\n                          // A valid sequence comprises four hexdigits (case-\n                          // insensitive) that form a single hexadecimal value.\n                          if (!(charCode >= 48 && charCode <= 57 || charCode >= 97 && charCode <= 102 || charCode >= 65 && charCode <= 70)) {\n                            // Invalid Unicode escape sequence.\n                            abort();\n                          }\n                        }\n                        // Revive the escaped character.\n                        value += fromCharCode(\"0x\" + source.slice(begin, Index));\n                        break;\n                      default:\n                        // Invalid escape sequence.\n                        abort();\n                    }\n                  } else {\n                    if (charCode == 34) {\n                      // An unescaped double-quote character marks the end of the\n                      // string.\n                      break;\n                    }\n                    charCode = source.charCodeAt(Index);\n                    begin = Index;\n                    // Optimize for the common case where a string is valid.\n                    while (charCode >= 32 && charCode != 92 && charCode != 34) {\n                      charCode = source.charCodeAt(++Index);\n                    }\n                    // Append the string as-is.\n                    value += source.slice(begin, Index);\n                  }\n                }\n                if (source.charCodeAt(Index) == 34) {\n                  // Advance to the next character and return the revived string.\n                  Index++;\n                  return value;\n                }\n                // Unterminated string.\n                abort();\n              default:\n                // Parse numbers and literals.\n                begin = Index;\n                // Advance past the negative sign, if one is specified.\n                if (charCode == 45) {\n                  isSigned = true;\n                  charCode = source.charCodeAt(++Index);\n                }\n                // Parse an integer or floating-point value.\n                if (charCode >= 48 && charCode <= 57) {\n                  // Leading zeroes are interpreted as octal literals.\n                  if (charCode == 48 && ((charCode = source.charCodeAt(Index + 1)), charCode >= 48 && charCode <= 57)) {\n                    // Illegal octal literal.\n                    abort();\n                  }\n                  isSigned = false;\n                  // Parse the integer component.\n                  for (; Index < length && ((charCode = source.charCodeAt(Index)), charCode >= 48 && charCode <= 57); Index++);\n                  // Floats cannot contain a leading decimal point; however, this\n                  // case is already accounted for by the parser.\n                  if (source.charCodeAt(Index) == 46) {\n                    position = ++Index;\n                    // Parse the decimal component.\n                    for (; position < length; position++) {\n                      charCode = source.charCodeAt(position);\n                      if (charCode < 48 || charCode > 57) {\n                        break;\n                      }\n                    }\n                    if (position == Index) {\n                      // Illegal trailing decimal.\n                      abort();\n                    }\n                    Index = position;\n                  }\n                  // Parse exponents. The `e` denoting the exponent is\n                  // case-insensitive.\n                  charCode = source.charCodeAt(Index);\n                  if (charCode == 101 || charCode == 69) {\n                    charCode = source.charCodeAt(++Index);\n                    // Skip past the sign following the exponent, if one is\n                    // specified.\n                    if (charCode == 43 || charCode == 45) {\n                      Index++;\n                    }\n                    // Parse the exponential component.\n                    for (position = Index; position < length; position++) {\n                      charCode = source.charCodeAt(position);\n                      if (charCode < 48 || charCode > 57) {\n                        break;\n                      }\n                    }\n                    if (position == Index) {\n                      // Illegal empty exponent.\n                      abort();\n                    }\n                    Index = position;\n                  }\n                  // Coerce the parsed value to a JavaScript number.\n                  return +source.slice(begin, Index);\n                }\n                // A negative sign may only precede numbers.\n                if (isSigned) {\n                  abort();\n                }\n                // `true`, `false`, and `null` literals.\n                var temp = source.slice(Index, Index + 4);\n                if (temp == \"true\") {\n                  Index += 4;\n                  return true;\n                } else if (temp == \"fals\" && source.charCodeAt(Index + 4 ) == 101) {\n                  Index += 5;\n                  return false;\n                } else if (temp == \"null\") {\n                  Index += 4;\n                  return null;\n                }\n                // Unrecognized token.\n                abort();\n            }\n          }\n          // Return the sentinel `$` character if the parser has reached the end\n          // of the source string.\n          return \"$\";\n        };\n\n        // Internal: Parses a JSON `value` token.\n        var get = function (value) {\n          var results, hasMembers;\n          if (value == \"$\") {\n            // Unexpected end of input.\n            abort();\n          }\n          if (typeof value == \"string\") {\n            if ((charIndexBuggy ? value.charAt(0) : value[0]) == \"@\") {\n              // Remove the sentinel `@` character.\n              return value.slice(1);\n            }\n            // Parse object and array literals.\n            if (value == \"[\") {\n              // Parses a JSON array, returning a new JavaScript array.\n              results = [];\n              for (;;) {\n                value = lex();\n                // A closing square bracket marks the end of the array literal.\n                if (value == \"]\") {\n                  break;\n                }\n                // If the array literal contains elements, the current token\n                // should be a comma separating the previous element from the\n                // next.\n                if (hasMembers) {\n                  if (value == \",\") {\n                    value = lex();\n                    if (value == \"]\") {\n                      // Unexpected trailing `,` in array literal.\n                      abort();\n                    }\n                  } else {\n                    // A `,` must separate each array element.\n                    abort();\n                  }\n                } else {\n                  hasMembers = true;\n                }\n                // Elisions and leading commas are not permitted.\n                if (value == \",\") {\n                  abort();\n                }\n                results.push(get(value));\n              }\n              return results;\n            } else if (value == \"{\") {\n              // Parses a JSON object, returning a new JavaScript object.\n              results = {};\n              for (;;) {\n                value = lex();\n                // A closing curly brace marks the end of the object literal.\n                if (value == \"}\") {\n                  break;\n                }\n                // If the object literal contains members, the current token\n                // should be a comma separator.\n                if (hasMembers) {\n                  if (value == \",\") {\n                    value = lex();\n                    if (value == \"}\") {\n                      // Unexpected trailing `,` in object literal.\n                      abort();\n                    }\n                  } else {\n                    // A `,` must separate each object member.\n                    abort();\n                  }\n                } else {\n                  hasMembers = true;\n                }\n                // Leading commas are not permitted, object property names must be\n                // double-quoted strings, and a `:` must separate each property\n                // name and value.\n                if (value == \",\" || typeof value != \"string\" || (charIndexBuggy ? value.charAt(0) : value[0]) != \"@\" || lex() != \":\") {\n                  abort();\n                }\n                results[value.slice(1)] = get(lex());\n              }\n              return results;\n            }\n            // Unexpected token encountered.\n            abort();\n          }\n          return value;\n        };\n\n        // Internal: Updates a traversed object member.\n        var update = function (source, property, callback) {\n          var element = walk(source, property, callback);\n          if (element === undefined) {\n            delete source[property];\n          } else {\n            source[property] = element;\n          }\n        };\n\n        // Internal: Recursively traverses a parsed JSON object, invoking the\n        // `callback` function for each value. This is an implementation of the\n        // `Walk(holder, name)` operation defined in ES 5.1 section 15.12.2.\n        var walk = function (source, property, callback) {\n          var value = source[property], length;\n          if (typeof value == \"object\" && value) {\n            // `forOwn` can't be used to traverse an array in Opera <= 8.54\n            // because its `Object#hasOwnProperty` implementation returns `false`\n            // for array indices (e.g., `![1, 2, 3].hasOwnProperty(\"0\")`).\n            if (getClass.call(value) == arrayClass) {\n              for (length = value.length; length--;) {\n                update(getClass, forOwn, value, length, callback);\n              }\n            } else {\n              forOwn(value, function (property) {\n                update(value, property, callback);\n              });\n            }\n          }\n          return callback.call(source, property, value);\n        };\n\n        // Public: `JSON.parse`. See ES 5.1 section 15.12.2.\n        exports.parse = function (source, callback) {\n          var result, value;\n          Index = 0;\n          Source = \"\" + source;\n          result = get(lex());\n          // If a JSON string contains multiple tokens, it is invalid.\n          if (lex() != \"$\") {\n            abort();\n          }\n          // Reset the parser state.\n          Index = Source = null;\n          return callback && getClass.call(callback) == functionClass ? walk((value = {}, value[\"\"] = result, value), \"\", callback) : result;\n        };\n      }\n    }\n\n    exports.runInContext = runInContext;\n    return exports;\n  }\n\n  if (freeExports && !isLoader) {\n    // Export for CommonJS environments.\n    runInContext(root, freeExports);\n  } else {\n    // Export for web browsers and JavaScript engines.\n    var nativeJSON = root.JSON,\n        previousJSON = root.JSON3,\n        isRestored = false;\n\n    var JSON3 = runInContext(root, (root.JSON3 = {\n      // Public: Restores the original value of the global `JSON` object and\n      // returns a reference to the `JSON3` object.\n      \"noConflict\": function () {\n        if (!isRestored) {\n          isRestored = true;\n          root.JSON = nativeJSON;\n          root.JSON3 = previousJSON;\n          nativeJSON = previousJSON = null;\n        }\n        return JSON3;\n      }\n    }));\n\n    root.JSON = {\n      \"parse\": JSON3.parse,\n      \"stringify\": JSON3.stringify\n    };\n  }\n\n  // Export for asynchronous module loaders.\n  if (isLoader) {\n    define(function () {\n      return JSON3;\n    });\n  }\n}).call(this);\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}